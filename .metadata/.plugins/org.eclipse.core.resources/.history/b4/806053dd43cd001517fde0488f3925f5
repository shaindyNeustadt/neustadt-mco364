package neustadt.mco364.colorku;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Board {

	private int[][] generateSolution(int[][] game, int index) {
	    if (index > 80)
	        return game;

	    int x = index % 9;
	    int y = index / 9;

	    List<Integer> numbers = new ArrayList<Integer>();
	    for (int i = 1; i <= 9; i++)
	        numbers.add(i);
	    Collections.shuffle(numbers);

	    while (numbers.size() > 0) {
	        int number = getNextPossibleNumber(game, x, y, numbers);
	        if (number == -1)
	            return null;

	        game[y][x] = number;
	        int[][] tmpGame = generateSolution(game, index + 1);
	        if (tmpGame != null)
	            return tmpGame;
	        game[y][x] = 0;
	    }

	    return null;
	}
	
	private int getNextPossibleNumber(int[][] game, int x, int y, List<Integer> numbers) {
	    while (numbers.size() > 0) {
	        int number = numbers.remove(0);
	        if (isPossibleX(game, y, number)
	                && isPossibleY(game, x, number)
	                && isPossibleBlock(game, x, y, number))
	            return number;
	    }
	    return -1;
	}
	
	private int[][] generateGame(int[][] game) {
	    List<Integer> positions = new ArrayList<Integer>();
	    for (int i = 0; i < 81; i++)
	        positions.add(i);
	    Collections.shuffle(positions);
	    return generateGame(game, positions);
	}
	
	private int[][] generateGame(int[][] game, List<Integer> positions) {
	    while (positions.size() > 0) {
	        int position = positions.remove(0);
	        int x = position % 9;
	        int y = position / 9;
	        int temp = game[y][x];
	        game[y][x] = 0;

	        if (!isValid(game))
	            game[y][x] = temp;
	    }

	    return game;
	}
	
	private boolean isValid(int[][] game) {
	    return isValid(game, 0, new int[] { 0 });
	}
	
	private boolean isValid(int[][] game, int index, int[] numberOfSolutions) {
	    if (index > 80)
	        return ++numberOfSolutions[0] == 1;

	    int x = index % 9;
	    int y = index / 9;

	    if (game[y][x] == 0) {
	        List<Integer> numbers = new ArrayList<Integer>();
	        for (int i = 1; i <= 9; i++)
	            numbers.add(i);

	        while (numbers.size() > 0) {
	            int number = getNextPossibleNumber(game, x, y, numbers);
	            if (number == -1)
	                break;
	            game[y][x] = number;

	            if (!isValid(game, index + 1, numberOfSolutions)) {
	                game[y][x] = 0;
	                return false;
	            }
	            game[y][x] = 0;
	        }
	    } else if (!isValid(game, index + 1, numberOfSolutions))
	        return false;

	    return true;
	}
}